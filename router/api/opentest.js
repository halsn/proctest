const path = require('path')
const is = require('is_js')
const _ = require('lodash')

const db = require(path.resolve('lib/db.js'))
const Test = db.model('Test')
const getError = db.getError

module.exports.get = (req, res) => {
  const { uuid } = req.query
  if (is.not.truthy(uuid)) return res.json({ message: 'uuid required' })
  else return res.sendFile(path.resolve('./static/opentest.html'))
}

// 点击开始测试
module.exports.post = (req, res) => {
  const { uuid, sno } = req.body
  if (!sno) return res.json({ error: '缺少学号' })
  const option = { uuid, sno }

  validate(option)
    .then(verifyStage)
    .then(getData)
    .then(option => {
      const { stage, retData } = option
      return res.json({ success: '获取成功', payload: { stage, retData } })
    })
    .catch(err => {
      return res.json({ error: getError(err) })
    })

  function validate(option) {
    const { uuid, sno } = option
    return Test.findOne({ uuid })
      .then(test => {
        if (!test) return Promise.reject({ error: '测试编号有误' })
        const student = test.refStudents.find(s => s.sno === sno)
        if (!student) return Promise.reject({ error: '学号未匹配，请联系授课老师' })
        option = _.assign({ test, student }, option)
        return Promise.resolve(option)
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  function verifyStage(option) {
    const { test } = option
    const { stage } = test
    // const { answerExpireAt, expireAt } = test
    // const now = Date.now()
    // if (now <= answerExpireAt) stage = 'inAnswer'
    // else if (now > answerExpireAt && now <= expireAt) stage = 'inCorrect'
    // else if (!test.refStudents.every(s => s.isChecked)) stage = 'inCheck'
    // else stage = 'inFinished'
    option = _.assign({ stage }, option)
    return Promise.resolve(option)
  }

  function getData(option) {
    const { stage } = option
    if (stage === 'inAnswer') return getDataInAnswer(option)
    if (stage === 'inCorrect') return getDataInCorrect(option)
    if (stage === 'inCheck') return getDataInCheck(option)
    if (stage === 'inFinished') return getDataInFinished(option)
    else return Promise.resolve(option)
  }

  function getDataInAnswer(option) {
    const { student, test } = option
    const { canGetAnswers } = student
    if (!canGetAnswers) {
      student.refQuizs = student.refQuizs.map(q => {
        q.answers = []
        return q
      })
    }
    const { answerExpireAt } = test
    const retData = { student, answerExpireAt }
    option = _.assign({ retData }, option)
    return Promise.resolve(option)
  }

  function getDataInCorrect(option) {
    const { student, test } = option
    const { expireAt } = test
    const retData = { student, expireAt }
    option = _.assign({ retData }, option)
    return Promise.resolve(option)
  }

  function getDataInCheck(option) {
    return Promise.resolve(option)
  }

  function getDataInFinished(option) {
    const { student } = option
    const retData = { student }
    option = _.assign({ retData }, option)
    return Promise.resolve(option)
  }
}

module.exports.put = (req, res) => {
  const { sno, uuid, refQuizs } = req.body

  const option = { sno, uuid, refQuizs }

  validate(option)
    .then(getTest)
    .then(checkIfUpdate)
    .then(updateTest)
    .then(option => {
      const { retData } = option
      return res.json({ success: 'put', retData })
    })
    .catch(err => {
      return res.json({ error: getError(err) })
    })

  function validate(option) {
    const { sno, uuid, refQuizs } = option
    if (!sno) return Promise.reject({ error: '学号不能为空' })
    if (!uuid) return Promise.reject({ error: '测试编号不能为空' })
    if (is.not.array(refQuizs)) return Promise.reject({ error: '提交错误' })
    return Promise.resolve(option)
  }

  function getTest(option) {
    const { uuid } = option
    return Test.findOne({ uuid })
      .then(test => {
        if (!test) return Promise.reject({ error: '测试不存在' })
        option = _.assign({ test }, option)
        return Promise.resolve(option)
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }

  function checkIfUpdate(option) {
    var canUpdate = true
    const { test, sno } = option
    const student = test.refStudents.find(s => s.sno === sno)
    if (student.canGetAnswers) canUpdate = false
    else canUpdate = true
    option = _.assign({ canUpdate }, option)
    return Promise.resolve(option)
  }

  // stage: inAnswer
  function updateTest(option) {
    const { canUpdate } = option
    const { refQuizs, sno, test } = option
    const sIdx = test.refStudents.findIndex(s => s.sno === sno)
    const sIdxrefQuizs = test.refStudents[sIdx].refQuizs
    sIdxrefQuizs.forEach((q, idx) => {
      const postedQuiz = refQuizs.find(rq => rq.describe.content === q.describe.content)
      sIdxrefQuizs[idx].answered = postedQuiz.answered
      const answered = postedQuiz.answered.sort().join('')
      const answers = sIdxrefQuizs[idx].answers.sort().join('')
      if (q.genre !== '问答题') {
        if (answered === answers) {
          sIdxrefQuizs[idx].score = 10
          sIdxrefQuizs[idx].isRight = true
        } else {
          sIdxrefQuizs[idx].score = 0
          sIdxrefQuizs[idx].isRight = false
        }
        sIdxrefQuizs[idx].checked = true
      } else {
        sIdxrefQuizs[idx].score = 0
        if (answered) {
          sIdxrefQuizs[idx].isRight = true
          // 流程梳理不清晰
          if (canUpdate) {
            test.toCorrectQuizs.push({
              sno,
              data: sIdxrefQuizs[idx]
            })
          }
        }
      }
    })
    test.refStudents[sIdx].refQuizs = sIdxrefQuizs
    test.refStudents[sIdx].canGetAnswers = true
    option = _.assign({ retData: test.refStudents[sIdx] }, option)
    return test.save()
      .then(() => {
        return Promise.resolve(option)
      })
      .catch(err => {
        return Promise.reject(err)
      })
  }
}
