/* global window */
import React from 'react'
import { connect } from 'dva'
import moment from 'moment'
import is from 'is_js'
import { Icon, Rate, Spin, message, Alert, Checkbox, Radio, Card, Row, Col, Input, Form, Button } from 'antd'
import styles from './app.less'

const RadioGroup = Radio.Group
const CheckboxGroup = Checkbox.Group
const FormItem = Form.Item
const range = (m, n) => {
  return Array(n - (m + 1)).fill().map((x, i) => m + i)
}

const charMap = range(0, 25).map(e => String.fromCharCode(e + 65))

class App extends React.Component {
  constructor(props) {
    super(props)
    this.state = { leftTiem: { min: 0, sec: 0 }, cur: 0, curCorrect: 0, expireAt: 0 }
  }
  state: {
    leftTiem: {
      min: 0,
      sec: 0
    },
    cur: 0,
    refQuizs: [],
    canPost: false,
    sno: '',
    toCheckQuizs: [],
    curCorrect: 0,
    expireAt: 0
  }
  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    )
  }
  componentWillUnmount() {
    clearInterval(this.timerID)
  }
  tick() {
    const { opentest } = this.props
    const { answerExpireAt } = opentest
    const expireTime = new Date(answerExpireAt).getTime()
    const left = new Date(expireTime - Date.now())
    const min = left.getMinutes()
    const sec = left.getSeconds()
    if (min === 0 && sec === 0) {
      const { dispatch } = this.props
      const match = window.location.href.match(/uuid=.+#/)[0].slice(5)
      const uuid = match.slice(0, match.length - 1)
      const { refQuizs, sno } = this.state
      dispatch({ type: 'opentest/postAnswer', payload: { sno, uuid, refQuizs } })
      clearInterval(this.timerID)
    }
    this.setState({
      leftTiem: { min, sec }
    })
  }
  nextQuiz() {
    const max = this.state.refQuizs.length
    var cur = this.state.cur + 1
    cur = cur >= max ? max - 1 : cur
    this.setState({ cur })
  }
  preQuiz() {
    var cur = this.state.cur - 1
    cur = cur < 0 ? 0 : cur
    this.setState({ cur })
  }
  nextCorrect() {
    const max = this.state.toCheckQuizs.length
    var curCorrect = this.state.curCorrect + 1
    curCorrect = curCorrect >= max ? max - 1 : curCorrect
    this.setState({ curCorrect })
  }
  preCorrect() {
    var curCorrect = this.state.curCorrect - 1
    curCorrect = curCorrect < 0 ? 0 : curCorrect
    this.setState({ curCorrect })
  }
  render() {
    const { validateFieldsAndScroll, getFieldDecorator } = this.props.form
    const { dispatch, opentest, loading } = this.props
    const { stage, showLogin, student, expireAt } = opentest
    const { refQuizs, canGetAnswers, toCheckQuizs, postChecked } = student
    if (refQuizs) {
      this.state.refQuizs = refQuizs
    }
    if (toCheckQuizs) {
      this.state.toCheckQuizs = toCheckQuizs
    }
    const quizs = this.state.refQuizs || []
    const toCheck = this.state.toCheckQuizs || []
    const handleOk = () => {
      validateFieldsAndScroll((errors, values) => {
        if (errors) return
        const { sno } = values
        const match = window.location.href.match(/uuid=.+#/)[0].slice(5)
        const uuid = match.slice(0, match.length - 1)
        this.setState({ sno })
        dispatch({ type: 'opentest/post', payload: { sno, uuid } })
      })
    }
    const inAnswerAlertNode = (
      <div>
        <p>剩余时间：{this.state.leftTiem.min}分：{this.state.leftTiem.sec}秒</p>
        <p>注：问题全部填写后会出现提交按钮</p>
        <p>注：计时结束后会自动提交</p>
      </div>
    )
    const singChange = (v, id) => {
      const value = v.target.value
      this.state.refQuizs.find(q => q._id === id).answered = [value]
      if (quizs.every(q => q.answered.length > 0)) this.setState({ canPost: true })
      else this.setState({ canPost: false })
    }
    const multiChange = (v, id) => {
      const value = v
      this.state.refQuizs.find(q => q._id === id).answered = value
      if (quizs.every(q => q.answered.length > 0)) this.setState({ canPost: true })
      else this.setState({ canPost: false })
    }
    const judgeChange = (v, id) => {
      const value = v.target.value
      this.state.refQuizs.find(q => q._id === id).answered = [value]
      if (quizs.every(q => q.answered.length > 0)) this.setState({ canPost: true })
      else this.setState({ canPost: false })
    }
    const askChange = (v, id) => {
      const value = v.target.value
      if (!value.trim()) {
        this.state.refQuizs.find(q => q._id === id).answered = []
      } else this.state.refQuizs.find(q => q._id === id).answered = [value]
      if (quizs.every(q => q.answered.length > 0)) this.setState({ canPost: true })
      else this.setState({ canPost: false })
    }
    const paste = (evt) => {
      message.info('😏')
      return evt.preventDefault()
    }
    const getBody = q => {
      if (q.genre === '单选题') {
        if (canGetAnswers) {
          return (
            <div>
              <Card>
                <Alert showIcon type={q.isRight ? 'success' : 'error'} message={q.isRight ? '回答正确' : '回答错误'} />
                {q.selections.map((s, idx) => (
                  <div key={idx} style={{ display: 'flex' }}>
                    <p>{charMap[idx]}：{s}</p>
                  </div>
                ))}
                <p>正确答案：{q.answers.join('，')}</p>
                <p>提交的答案：{q.answered.join('，')}</p>
              </Card>
            </div>
          )
        } else {
          return (
            <div>
              <Card>
                <RadioGroup onChange={(v) => singChange(v, q._id)}>
                  {q.selections.map((s, idx) => (
                    <div key={idx} style={{ display: 'flex' }}>
                      <Radio value={s} />
                      <p>{charMap[idx]}：{s}</p>
                    </div>
                  ))}
                </RadioGroup>
              </Card>
            </div>
          )
        }
      } else if (q.genre === '多选题') {
        if (canGetAnswers) {
          return (
            <div>
              <Card>
                <Alert showIcon type={q.isRight ? 'success' : 'error'} message={q.isRight ? '回答正确' : '回答错误'} />
                {q.selections.map((s, idx) => (
                  <div key={idx} style={{ display: 'flex' }}>
                    <p>{charMap[idx]}：{s}</p>
                  </div>
                ))}
                <p>正确答案：{q.answers.join('，')}</p>
                <p>提交的答案：{q.answered.join('，')}</p>
              </Card>
            </div>
          )
        } else {
          return (
            <div>
              <Card>
                <CheckboxGroup onChange={(v) => multiChange(v, q._id)}>
                  {q.selections.map((s, idx) => (
                    <div key={idx} style={{ display: 'flex' }}>
                      <Checkbox value={s} />
                      <p>{charMap[idx]}：{s}</p>
                    </div>
                  ))}
                </CheckboxGroup>
              </Card>
            </div>
          )
        }
      } else if (q.genre === '判断题') {
        if (canGetAnswers) {
          return (
            <div>
              <Card>
                <Alert showIcon type={q.isRight ? 'success' : 'error'} message={q.isRight ? '回答正确' : '回答错误'} />
                <p>正确答案：{q.answers.join('，')}</p>
                <p>提交的答案：{q.answered.join('，')}</p>
              </Card>
            </div>
          )
        } else {
          return (
            <div>
              <Card>
                <RadioGroup onChange={(v) => judgeChange(v, q._id)}>
                  <div style={{ display: 'flex' }}>
                    <Radio value={'正确'} />
                    <p>正确</p>
                  </div>
                  <div style={{ display: 'flex' }}>
                    <Radio value={'错误'} />
                    <p>错误</p>
                  </div>
                </RadioGroup>
              </Card>
            </div>
          )
        }
      } else if (q.genre === '问答题') {
        if (canGetAnswers) {
          return (
            <div>
              <Card>
                <Alert showIcon type={'warning'} message={'待批改'} />
                <p>提交的答案：{q.answered.join('，')}</p>
              </Card>
            </div>
          )
        } else {
          return (
            <div onPaste={paste}>
              <Card>
                <Input onChange={(v) => askChange(v, q._id)} onPaste={paste} type='textarea' rows={4} />
              </Card>
            </div>
          )
        }
      }
    }
    const postAnswer = () => {
      const match = window.location.href.match(/uuid=.+#/)[0].slice(5)
      const uuid = match.slice(0, match.length - 1)
      const { refQuizs, sno } = this.state
      dispatch({ type: 'opentest/postAnswer', payload: { sno, uuid, refQuizs } })
    }
    const postCheck = () => {
      if (!this.state.toCheckQuizs.length) return
      const match = window.location.href.match(/uuid=.+#/)[0].slice(5)
      const uuid = match.slice(0, match.length - 1)
      dispatch({ type: 'opentest/postCheck', payload: { sno: student.sno, uuid, data: this.state.toCheckQuizs } })
    }
    const Login = (
      <div className={styles.center}>
        <Row style={{ width: '80%', marginTop: 200 }}>
          <Col>
            <Row>
              <Col>
                <FormItem label='学号：' hasFeedback>
                  {getFieldDecorator('sno', {
                    rules: [
                      {
                        required: true,
                        message: '不能为空'
                      }
                    ]
                  })(<Input onPressEnter={handleOk} />)}
                </FormItem>
              </Col>
            </Row>
            <Row>
              <Col>
                <Button loading={loading} type='primary' onClick={handleOk} style={{ width: '100%' }}>开始测试</Button>
              </Col>
            </Row>
          </Col>
        </Row>
      </div>
    )
    const inAnswer = (
      <div>
        <Spin spinning={loading}>
          <Row>
            <Col lg={24}>
              <Alert banner message={inAnswerAlertNode} />
            </Col>
            {quizs.map((q, idx) => (
              <div key={q._id} style={{ display: idx === this.state.cur ? 'block' : 'none' }}>
                <Col lg={24}>
                  <Card>
                    <p>{q.genre}：{q.describe.content}</p>
                  </Card>
                </Col>
                <Col lg={24}>
                  {getBody(q)}
                </Col>
              </div>
            ))}
            <Col style={{ display: 'flex', marginLeft: 10, marginRight: 10 }}>
              <Button onClick={this.preQuiz.bind(this)} style={{ flex: 1 }}>上一题</Button>
              <Button onClick={this.nextQuiz.bind(this)} style={{ flex: 1 }}>下一题</Button>
            </Col>
            <Col style={{ display: canGetAnswers ? 'none' : (this.state.canPost ? 'flex' : 'none'), marginLeft: 10, marginRight: 10, marginTop: 10 }}>
              <Button loading={loading} onClick={postAnswer} type='primary' style={{ flex: 1 }}>提交</Button>
            </Col>
          </Row>
        </Spin>
      </div>
    )
    const inCorrectAlertNode = (
      <div>
        <p>请于{moment(expireAt).locale('zh-cn').format('MMM Do a h:mm')}之前提交评论结果</p>
        <p>注：问题全部评论后会出现提交按钮</p>
        <p>注：请认真评论，否则将影响本次测试最终成绩</p>
        <p>注：如果问答题数量过少，某些同学可能不会被分配到批改任务</p>
      </div>
    )
    const postCheckedAlertNode = (
      <div>
        <p>以提交评论</p>
      </div>
    )
    const inCorrect = (
      <div>
        <Spin spinning={loading}>
          <Row>
            <Col lg={24}>
              {postChecked ? (
                <Alert type='success' banner message={postCheckedAlertNode} />
              ) : (
                <Alert banner message={inCorrectAlertNode} />
              )}
            </Col>
            {toCheck.map((q, idx) => (
              <div key={idx} style={{ display: this.state.curCorrect === idx ? 'block' : 'none' }}>
                <Col lg={24}>
                  <Card>
                    <p>{q.data.genre}：{q.data.describe.content}</p>
                  </Card>
                </Col>
                <Col lg={24}>
                  <Card>
                    <p>参考答案：{q.data.answers.join('')}</p>
                    <p>提交的答案：{q.data.answered.join('')}</p>
                    {postChecked ? (
                      <div style={{ display: 'flex', alignItems: 'baseline', justifyContent: 'space-between' }}>
                        <p>评分：</p>
                        <Rate value={q.score} disabled={postChecked} character={<Icon type='like' />} />
                      </div>
                    ) : (
                      <div style={{ display: 'flex', alignItems: 'baseline', justifyContent: 'space-between' }}>
                        <p>评分：</p>
                        <Rate disabled={postChecked} onChange={v => updateRate(v, idx)} character={<Icon type='like' />} />
                      </div>
                    )}
                  </Card>
                </Col>
              </div>
            ))}
            <Col style={{ display: 'flex', marginLeft: 10, marginRight: 10 }}>
              <Button onClick={this.preCorrect.bind(this)} style={{ flex: 1 }}>上一题</Button>
              <Button onClick={this.nextCorrect.bind(this)} style={{ flex: 1 }}>下一题</Button>
            </Col>
            <Col style={{ display: !postChecked && toCheck.every(c => c.hasComment) ? 'flex' : 'none', marginLeft: 10, marginRight: 10, marginTop: 10 }}>
              <Button onClick={postCheck} loading={loading} type='primary' style={{ flex: 1 }}>提交</Button>
            </Col>
          </Row>
        </Spin>
      </div>
    )
    const updateRate = (v, idx) => {
      if (is.not.number(idx)) return
      this.state.toCheckQuizs[idx].hasComment = true
      this.state.toCheckQuizs[idx].score = v
      this.state.toCheckQuizs[idx].checkSno = student.sno
    }
    const inFinished = (
      <div>
        <Spin spinning={loading}>
          <Row>
            <Col lg={24}>
              <Alert banner message='测试以结束' />
            </Col>
            {quizs.map((q, idx) => (
              <div key={idx} style={{ display: this.state.cur === idx ? 'block' : 'none' }}>
                <Col lg={24}>
                  <Card>
                    <p>{q.genre}：{q.describe.content}</p>
                  </Card>
                </Col>
                <Col lg={24}>
                  <Card>
                    <p>参考答案：{q.answers.join('')}</p>
                    <p>提交的答案：{q.answered.join('')}</p>
                    <p>得分：{q.score}</p>
                  </Card>
                </Col>
              </div>
            ))}
            <Col style={{ display: 'flex', marginLeft: 10, marginRight: 10 }}>
              <Button onClick={this.preQuiz.bind(this)} style={{ flex: 1 }}>上一题</Button>
              <Button onClick={this.nextQuiz.bind(this)} style={{ flex: 1 }}>下一题</Button>
            </Col>
          </Row>
        </Spin>
      </div>
    )
    if (showLogin) return Login
    else if (stage === 'inAnswer') return inAnswer
    else if (stage === 'inCorrect') return inCorrect
    else if (stage === 'inFinished') return inFinished
    else return Login
  }
}

export default connect(({ opentest, loading }) => ({ opentest, loading: loading.global }))(Form.create()(App))
